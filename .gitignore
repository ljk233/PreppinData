# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Add custom paths
.virtual_documents
*/input
_2023/02_intenational_bank_numbers.ipynb
_2023/03_targets_for_dsb.ipynb
_2023/04_new_customers.ipynb
_2023/05_dsb_raking.ipynb
_2023/06_dsb_customer_ratings.ipynb
_2023/challenge08.py
_2023/challenge01/01_clean_week1_data.ipynb
_2023/challenge01/02_stage_transaction_bank.ipynb
_2023/challenge01/03_stage_transaction_method.ipynb
_2023/challenge01/04_generate_outputs.ipynb
_2023/data/output/avg_bank_rankings.ndjson
_2023/data/output/flagged_transction.ndjson
_2023/data/output/new_customer.ndjson
_2023/data/output/survey_result_summary.ndjson
_2023/data/output/total_transaction_value_by_bank_customer.ndjson
_2023/data/output/total_transaction_value_by_bank_detailed.ndjson
_2023/data/output/total_transaction_value_by_bank.ndjson
_2023/data/output/wk8_ranked_purchases.ndjson
_2023/data/stage/account_holders.parquet
_2023/data/stage/account_info.parquet
_2023/data/stage/customer_survey.ndjson
_2023/data/stage/stg_transaction_bank.parquet
_2023/data/stage/stg_transaction_method.parquet
_2023/data/stage/stg_transaction.parquet
_2023/data/stage/transaction_detail.parquet
_2023/data/stage/transaction_path.parquet
_2023/src/__init__.py
_2023/src/clean_data.py
_2023/src/file_info.py
_2023/src/load_data.py
_2023/src/params.py
_2023/src/schemas.py
_2024/challenge01.py
_2024/challenge2.ipynb
_2024/challenge3.ipynb
_2024/challenge4.ipynb
_2024/challenge05.py
_2024/challenge08.ipynb
_2024/challenge08.py
_2024/wk6.ipynb
_2024/challenge04/__init__..py
_2024/challenge04/1_plan.md
_2024/challenge04/2_prep_seat_allocations.ipynb
_2024/challenge04/3_prep_seat_plan.ipynb
_2024/challenge04/4_find_unbooked_seats.ipynb
_2024/challenge04/load_data.py
_2024/data/input/.keep
_2024/data/input/PD 2024 Wk 1 Input.csv
_2024/data/input/PD 2024 Wk 3 Input.xlsx
_2024/data/input/PD 2024 Wk 4 Input.xlsx
_2024/data/input/PD 2024 Wk 6 Input.csv
_2024/data/input/Prep Air 2024 Flights.csv
_2024/data/input/Prep Air Customers.csv
_2024/data/input/Prep Air Loyalty.xlsx
_2024/data/input/Prep Air Ticket Sales.csv
_2024/data/input/Prep Air Updated Customers.csv
_2024/data/output/.keep
_2024/data/output/aggregated_quarterly_price_data_by_class_flow_card.ndjson
_2024/data/output/booking_summary_json
_2024/data/output/difference_to_target.ndjson
_2024/data/output/fixed_flight_details.ndjson
_2024/data/output/flight_details.ndjson
_2024/data/output/unbooked_seats.ndjson
_2024/src/challenge2.py
_2024/src/challenge3.py
_2024/src/challenge4.py
_2024/src/load_data.py
preppin_data/_connect.py
preppin_data/_parameters.py
preppin_data/_data_lake/build.py
preppin_data/_data_lake/encode.py
main.py
